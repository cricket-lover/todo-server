{"version":3,"sources":["components/InputBox.js","components/Title.js","components/Task.js","components/TaskContainer.js","components/todoApi.js","components/Todo.js","App.js","serviceWorker.js","index.js"],"names":["InputBox","props","useState","value","setValue","type","onKeyDown","event","target","trim","keyCode","onEnterPress","onChange","className","Title","isEditable","setIsEditable","onClick","deleteAllTasks","Task","taskContent","status","toggleStatus","taskId","deleteTask","TaskContainer","taskList","tasks","map","task","key","id","content","toggleTaskStatus","postReq","url","data","fetch","method","headers","body","JSON","stringify","then","res","json","title","Todo","todo","setTodo","useEffect","TodoAPI","updateTodo","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.18dbd541.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nconst InputBox = (props) => {\n  const [value, setValue] = useState(props.value || '');\n\n  const handleKeyDown = (event) => {\n    const value = event.target.value.trim();\n    if (event.keyCode === 13 && value !== '') {\n      props.onEnterPress(value);\n      setValue('');\n    }\n  };\n\n  return (\n    <input\n      type=\"text\"\n      value={value}\n      onKeyDown={handleKeyDown}\n      onChange={(event) => {\n        setValue(event.target.value);\n      }}\n      className={props.className}\n    />\n  );\n};\n\nexport default InputBox;\n","import React, { useState } from 'react';\nimport InputBox from './InputBox';\n\nconst Title = (props) => {\n  const [isEditable, setIsEditable] = useState(false);\n\n  const handleClick = () => {\n    setIsEditable(true);\n  };\n\n  const updateTitle = (value) => {\n    setIsEditable(false);\n    props.onChange(value);\n  };\n\n  if (isEditable) {\n    return (\n      <InputBox\n        value={props.value}\n        onEnterPress={updateTitle}\n        className=\"title\"\n      />\n    );\n  }\n  return (\n    <div className=\"title-header\">\n      <p className=\"title\" onClick={handleClick}>\n        {props.value}\n      </p>\n      <p className=\"delete\" onClick={() => props.deleteAllTasks()}>\n        x\n      </p>\n    </div>\n  );\n};\n\nexport default Title;\n","import React from 'react';\n\nconst Task = ({ taskContent, status, toggleStatus, taskId, deleteTask }) => {\n  return (\n    <div className={`task ${status}`}>\n      <div className=\"task-item\">\n        <p className=\"box\"></p>\n        <p className=\"taskContent\" onClick={() => toggleStatus(taskId)}>\n          {taskContent}\n        </p>\n      </div>\n      <p className=\"delete\" onClick={() => deleteTask(taskId)}>\n        x\n      </p>\n    </div>\n  );\n};\n\nexport default Task;\n","import React from 'react';\nimport Task from './Task';\n\nconst TaskContainer = (props) => {\n  const taskList = props.tasks.map((task) => (\n    <Task\n      key={task.id}\n      taskContent={task.content}\n      status={task.status}\n      toggleStatus={props.toggleTaskStatus}\n      taskId={task.id}\n      deleteTask={props.deleteTask}\n    />\n  ));\n  return <div>{taskList}</div>;\n};\n\nexport default TaskContainer;\n","const postReq = (url, data) => {\n  return fetch(url, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(data),\n  });\n};\n\nconst getTodo = () => fetch('/api/getTodo').then((res) => res.json());\n\nconst addTask = (task) => {\n  return postReq('/api/addTask', { content: task });\n};\n\nconst toggleTaskStatus = (taskId) => {\n  return postReq('/api/toggleTaskStatus', { taskId });\n};\n\nconst deleteTask = (taskId) => {\n  return postReq('/api/deleteTask', { taskId });\n};\n\nconst updateTitle = (title) => {\n  return postReq('/api/updateTitle', { title });\n};\n\nconst resetTodo = () => {\n  return postReq('/api/resetTodo');\n};\n\nexport default {\n  getTodo,\n  addTask,\n  toggleTaskStatus,\n  deleteTask,\n  updateTitle,\n  resetTodo,\n};\n\n// module.exports = TodoAPI;\n","import React, { useState, useEffect } from 'react';\nimport Title from './Title';\nimport TaskContainer from './TaskContainer';\nimport InputBox from './InputBox';\nimport TodoAPI from './todoApi';\nimport '../todo.css';\n\nconst Todo = (props) => {\n  const [todo, setTodo] = useState({ Title: 'Todo', tasks: [] });\n  useEffect(() => {\n    TodoAPI.getTodo().then(setTodo);\n  }, []);\n\n  const updateTodo = () => TodoAPI.getTodo().then(setTodo);\n\n  const toggleTaskStatus = (taskId) => {\n    TodoAPI.toggleTaskStatus(taskId).then(updateTodo);\n  };\n\n  const addTask = (value) => {\n    TodoAPI.addTask(value).then(updateTodo);\n  };\n\n  const deleteAllTasks = () => {\n    TodoAPI.resetTodo().then(updateTodo);\n  };\n\n  const deleteTask = (taskId) => {\n    TodoAPI.deleteTask(taskId).then(updateTodo);\n  };\n\n  const updateTitle = (title) => {\n    TodoAPI.updateTitle(title).then(updateTodo);\n  };\n\n  return (\n    <div className=\"todo-container\">\n      <Title\n        value={todo.title}\n        onChange={updateTitle}\n        deleteAllTasks={deleteAllTasks}\n      />\n      <TaskContainer\n        deleteTask={deleteTask}\n        tasks={todo.tasks}\n        toggleTaskStatus={toggleTaskStatus}\n      />\n      <InputBox className=\"taskInput\" onEnterPress={addTask} />\n    </div>\n  );\n};\n\nexport default Todo;\n","import React from 'react';\nimport './App.css';\nimport Todo from './components/Todo';\n\nfunction App() {\n  return <Todo />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}